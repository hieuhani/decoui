// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`deco-plugin should add useDeco hook when deco is used with breakpoints 1`] = `
"import { jsx as _jsx } from "react/jsx-runtime";
function MyComponent() {
  const deco = useDeco(["windowWidth"]);
  return /*#__PURE__*/_jsx(View, {
    style: deco({
      sm: {
        width: 100
      },
      md: {
        width: 200
      }
    })
  });
}"
`;

exports[`deco-plugin should add useDeco hook when deco is used with dark mode 1`] = `
"import { jsx as _jsx } from "react/jsx-runtime";
function MyComponent() {
  const deco = useDeco(["colorScheme"]);
  return /*#__PURE__*/_jsx(View, {
    style: deco({
      dark: {
        bg: 'gray.800'
      }
    })
  });
}"
`;

exports[`deco-plugin should add useDeco hook when deco is used with dark mode and should be worked with arrow function 1`] = `
"import { jsx as _jsx } from "react/jsx-runtime";
const MyComponent = () => {
  const deco = useDeco(["colorScheme"]);
  return /*#__PURE__*/_jsx(View, {
    style: deco({
      dark: {
        bg: 'gray.800'
      }
    })
  });
};"
`;

exports[`deco-plugin should add useDeco hook with multiple reactive props 1`] = `
"import { jsx as _jsx } from "react/jsx-runtime";
function MyComponent() {
  const deco = useDeco(["colorScheme", "windowWidth"]);
  return /*#__PURE__*/_jsx(View, {
    style: deco({
      dark: {
        bg: 'gray.800'
      },
      sm: {
        width: 100
      },
      md: {
        width: 200
      }
    })
  });
}"
`;

exports[`deco-plugin should handle multiple deco calls in the same component 1`] = `
"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
function MyComponent() {
  const deco = useDeco(["colorScheme", "windowWidth"]);
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [/*#__PURE__*/_jsx(View, {
      style: deco({
        dark: {
          bg: 'gray.800'
        }
      })
    }), /*#__PURE__*/_jsx(Text, {
      style: deco({
        sm: {
          fontSize: 14
        },
        md: {
          fontSize: 16
        }
      })
    })]
  });
}"
`;

exports[`deco-plugin should not add useDeco hook for non-reactive props 1`] = `
"import { jsx as _jsx } from "react/jsx-runtime";
function MyComponent() {
  return /*#__PURE__*/_jsx(View, {
    style: deco({
      padding: 10,
      margin: 20
    })
  });
}"
`;

exports[`deco-plugin should not duplicate useDeco hook if already present 1`] = `
"import { jsx as _jsx } from "react/jsx-runtime";
function MyComponent() {
  const deco = useDeco(['colorScheme']);
  return /*#__PURE__*/_jsx(View, {
    style: deco({
      dark: {
        bg: 'gray.800'
      }
    })
  });
}"
`;

exports[`deco-plugin should not transform non-component functions 1`] = `
"function helperFunction() {
  return deco({
    dark: {
      bg: 'gray.800'
    }
  });
}"
`;
